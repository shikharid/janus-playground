{"version":3,"sources":["webrtc/UserMedia.ts","utils.ts","elements.ts","janus/Constants.ts","janus/types/Messages.ts","janus/PluginHandle.ts","janus/Session.ts","janus/Janus.ts","video-room/Publisher.ts","video-room/Subscriber.ts","video-room/VideoRoom.ts","index.ts"],"names":[],"mappings":"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","file":"src.38956167.map","sourceRoot":"../src","sourcesContent":["\nexport class UserMedia {\n    public audioDeviceId?: string;\n    public videoDeviceId?: string;\n\n    public mediaConstraints(): MediaStreamConstraints {\n        return {audio: this.audioConstraints(), video: this.videoConstraints()};\n    }\n\n    private audioConstraints() {\n        if (this.audioDeviceId) {\n            return {\n                deviceId: this.audioDeviceId\n            };\n        } else {\n            return false;\n        }\n    }\n\n    private videoConstraints() {\n        if (this.videoDeviceId) {\n            return {\n                deviceId: this.videoDeviceId,\n                height: 480,\n                width: 640\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public async videoDevices() {\n        await this.getConsent();\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.filter(device => device.kind === \"videoinput\"));\n    }\n\n    public async audioInDevices() {\n        await this.getConsent();\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.filter(device => device.kind === \"audioinput\"));\n    }\n\n    public async audioOutDevices() {\n        await this.getConsent();\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.filter(device => device.kind === \"audiooutput\"));\n    }\n\n    private async getConsent() {\n        return navigator.mediaDevices.getUserMedia({audio: true, video: true});\n    }\n}\n\nexport let userMedia = new UserMedia();\n\n// @ts-ignore\nwindow.umedia = userMedia;","export function tid() : string {\n    return '4xxx-yxxx-xxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nexport function autoExpiringPromise<T>(expiryInMillis: number): Promise<T>{\n    return new Promise<T>(((__, reject) => {\n        setTimeout(() => reject(\"request timed out\"), expiryInMillis);\n    }));\n}\n\nexport function prettifyJson(json: any) {\n    if (typeof json === 'object') return JSON.stringify(json, null, 4);\n    else return json;\n}\n\nexport function rUsername() {\n    const a = [\"java\", \"flock\", \"js\", \"python\"];\n    const b = [\"noob\", \"ninja\", \"monkey\"];\n    return a[Math.floor(Math.random()*a.length)] + \"-\" + b[Math.floor(Math.random()*b.length)];\n}","export function getEl(el: string) {\n    return document.getElementById(el);\n}\n\nexport const constraintsDiv = getEl('constraint-div') as HTMLDivElement;\nexport const roomDiv = getEl('room-div') as HTMLDivElement;\nexport const audioSelect = getEl('audioSource') as HTMLSelectElement;\nexport const videoSelect = getEl('videoSource') as HTMLSelectElement;\nexport const joinBtn = getEl('join-room-btn') as HTMLButtonElement;\nexport const progressBar = getEl('progress-bar') as HTMLDivElement;\nexport const localStreamVid = getEl('local-stream') as HTMLVideoElement;\nexport const remoteStreamDiv = getEl('remote-streams') as HTMLDivElement;\n\nexport const username = getEl('username') as HTMLInputElement;\n\nconst remoteVids = new Map<String, RemoteVideoDisplay>();\n\nfunction newRemoteVidElement(id: string): HTMLVideoElement {\n    const vid = document.createElement('video');\n    if (localStreamVid.getAttribute('pid') === id) {\n        vid.muted = true;\n    }\n    vid.autoplay = true;\n    vid.height = 240;\n    vid.width = 320;\n    vid.setAttribute('style', 'margin-bottom: 0;')\n    vid.setAttribute('playsinline', \"true\");\n    vid.classList.add('responsive-video');\n    return vid;\n}\n\nfunction newRemoteInfoElement() {\n    return document.createElement('pre');\n}\n\nexport function remoteVideoDisplayer(id: string): RemoteVideoDisplay {\n    if (!remoteVids.has(id)) {\n        const vid: HTMLVideoElement = newRemoteVidElement(id);\n        const info: HTMLElement = newRemoteInfoElement();\n        const div: HTMLDivElement = document.createElement('div');\n        div.classList.add('video-box');\n        div.classList.add('col');\n        div.classList.add('l4');\n        div.appendChild(vid);\n        div.appendChild(info);\n        div.id = id;\n        const rvd: RemoteVideoDisplay = {\n            videoEl: vid,\n            info: info,\n            div: div\n        }\n        remoteVids.set(id, rvd);\n        remoteStreamDiv.appendChild(div);\n    }\n    return <RemoteVideoDisplay>remoteVids.get(id);\n}\n\nexport function removeRemoteVid(id: string) {\n    const rvd = remoteVids.get(id);\n    if (rvd) {\n        remoteStreamDiv.removeChild(rvd.div);\n    }\n}\n\nexport type RemoteVideoDisplay = {\n    div: HTMLDivElement,\n    videoEl: HTMLVideoElement,\n    info: HTMLElement,\n    stats?: HTMLElement\n}\n\nconst _signalLog = getEl('signal-log') as HTMLPreElement;\nconst logs: HTMLElement[] = [];\n\nexport function signalLog(log: string) {\n    const time = new Date().toLocaleTimeString();\n    _signalLog.insertAdjacentText('afterbegin', `[${time}] ${log}\\n\\n`);\n}\n\nexport const statsDiv = getEl('stats-div') as HTMLDivElement;\n\nexport const stats = getEl('stats') as HTMLDivElement;\n\n// let stats = new Stats();\n// stats.showPanel( 2); // 0: fps, 1: ms, 2: mb, 3+: custom\n// document.body.appendChild( stats.dom );\n//\n// function animate() {\n//\n//     stats.begin();\n//\n//     // monitored code goes here\n//\n//     stats.end();\n//\n//     requestAnimationFrame( animate );\n//\n// }\n//\n// requestAnimationFrame( animate );\n\nexport function hideEl(el: HTMLElement) {\n    el.classList.add('hidden');\n}\n\nexport function unhideEl(el: HTMLElement) {\n    el.classList.remove('hidden');\n}","export const JANUS_BASE = 'https://ec2-3-7-218-198.ap-south-1.compute.amazonaws.com:8089/';\nexport const JANUS_WS = 'wss://ec2-3-7-218-198.ap-south-1.compute.amazonaws.com:8989/';\nexport const TEST_ROOM_ID = 1234;","import {ParticipantInfo} from \"./ParticipantInfo\";\n\nexport type SessionMessage = { session_id: string }\n\nexport type HandleMessageWithId = SessionMessage & { handle_id: string }\nexport type HandleMessageWithSender = SessionMessage & { sender: string }\n\nexport type HandleMessage = HandleMessageWithId | HandleMessageWithSender\n\nexport function isSessionMessage(msg: any): msg is SessionMessage {\n    return (msg as SessionMessage).session_id !== undefined;\n}\n\nexport function isHandleMessage(msg: any): msg is HandleMessage {\n    return isHandleMessageWithId(msg) || isHandleMessageWithSender(msg);\n}\n\nexport function isHandleMessageWithId(msg: any): msg is HandleMessageWithId {\n    return isSessionMessage(msg) && ((msg as HandleMessageWithId).handle_id !== undefined);\n}\n\nexport function isHandleMessageWithSender(msg: any): msg is HandleMessageWithSender {\n    return isSessionMessage(msg) && ((msg as HandleMessageWithSender).sender !== undefined);\n}\n\nexport type JanusEvent = { plugindata?: object, janus: \"event\" | \"webrtcup\" | \"slowlink\" | \"media\" | \"hangup\" } & HandleMessage;\n\nexport type JanusVideoRoomEvent = {\n    plugindata?: {\n        plugin: \"janus.plugin.videoroom\",\n        data: {\n            videoroom: string,\n            id?: number,\n            publishers?: ParticipantInfo[]\n        }\n    },\n    jsep?: {\n        type: \"answer\" | \"offer\",\n        sdp: string,\n    }\n} & JanusEvent;\n\n\nexport function isJanusEvent(msg: any): msg is JanusEvent {\n    return isHandleMessage(msg) && (msg as JanusEvent).janus !== undefined;\n}\n","// provides apis to communicate over a video room plugin handle\n\nimport {Session} from \"./Session\";\nimport {JanusResponse} from \"./types/JanusResponse\";\nimport {JanusSessionHandleRequest} from \"./types/JanusRequest\";\nimport {prettifyJson} from \"../utils\";\nimport {HandleMessage, isJanusEvent, JanusEvent} from \"./types/Messages\";\n\nexport class PluginHandle {\n    public readonly handleId: string;\n    private readonly session: Session;\n    private readonly eventListeners: Map<String, PluginHandleEventListener>;\n    constructor(handleId: string, session: Session) {\n        this.handleId = handleId;\n        this.session = session;\n        this.eventListeners = new Map<String, PluginHandleEventListener>();\n    }\n\n    public setEventListener(event: string, callback: PluginHandleEventListener) {\n        this.eventListeners.set(event, callback);\n    }\n\n    public detach(): Promise<any> {\n        return this.session.detachHandle(this);\n    }\n\n    public send<T extends JanusResponse>(body: object, jsep?: object) : Promise<T> {\n        let req: JanusSessionHandleRequest = {\n            body: body,\n            janus: \"message\",\n            jsep: jsep,\n            handle_id: this.handleId,\n            session_id: this.session.sessionId\n        }\n        this.logOutgoing(`sending req \\n \\t body: ${prettifyJson(body)} \\n \\t jsep: ${prettifyJson(jsep)}`)\n        return this.session.send(req);\n    }\n\n    public receive(msg: HandleMessage) {\n        if (isJanusEvent(msg)) {\n            const handler = this.eventListeners.get(msg.janus);\n            if (handler) {\n                handler.onEvent(msg);\n            } else {\n                this.logIncoming(`unhandled EVENT ${prettifyJson(msg)}`);\n            }\n        } else {\n            this.logIncoming(`unhandled MESSAGE ${prettifyJson(msg)}`);\n        }\n    }\n\n    private logIncoming(log: string) {\n        console.debug(`JANUS => session ${this.session.sessionId} => handle ${this.handleId} => ${log}`);\n    }\n\n    private logOutgoing(log: string) {\n        console.debug(`JANUS <= session ${this.session.sessionId} <= handle ${this.handleId} <= ${log}`);\n    }\n}\n\nexport interface PluginHandleEventListener {\n    onEvent(ev: JanusEvent): Promise<any>;\n}","// provides apis to communicate over a \"session\"\n\nimport {janus} from \"./Janus\";\nimport {JanusResponse} from \"./types/JanusResponse\";\nimport {JanusSessionHandleRequest, JanusSessionRequest, PluginAttachRequest} from \"./types/JanusRequest\";\nimport {PluginHandle} from \"./PluginHandle\";\nimport {prettifyJson} from \"../utils\";\nimport {isHandleMessage, isHandleMessageWithId, isHandleMessageWithSender, SessionMessage} from \"./types/Messages\";\n\nexport class Session {\n    public readonly sessionId: string;\n    private readonly handles: Map<String, PluginHandle>;\n    constructor(sessionId: string) {\n        this.sessionId = sessionId;\n        this.handles = new Map();\n        this.keepSessionAlive();\n    }\n\n    public createHandle(plugin: string = \"janus.plugin.videoroom\"): Promise<PluginHandle> {\n        let req: PluginAttachRequest = {\n            janus: \"attach\",\n            plugin: plugin,\n            session_id: this.sessionId\n        };\n        return this.send<PluginHandleCreated>(req)\n            .then(resp => {\n                let handle: PluginHandle = new PluginHandle(resp.data.id, this);\n                this.handles.set(handle.handleId, handle);\n                return handle;\n            });\n    }\n\n    public send<T extends JanusResponse>(req: JanusSessionRequest) : Promise<T> {\n        req.session_id = this.sessionId;\n        this.logOutgoing(`sending req ${prettifyJson(req)}`);\n        return janus.send(req);\n    }\n\n    public receive(msg: SessionMessage) {\n        let logUnhandled = () => this.logIncoming(`unhandled msg ${prettifyJson(msg)}`);\n\n        if (isHandleMessage(msg)) {\n            let handleId, handle;\n            if (isHandleMessageWithId(msg)) {\n                handleId = msg.handle_id;\n            } else if(isHandleMessageWithSender(msg)) {\n                handleId = msg.sender;\n            }\n            if (handleId !== undefined && (handle = this.handles.get(handleId)) !== undefined) {\n                handle.receive(msg);\n            } else {\n                logUnhandled();\n            }\n        } else {\n            logUnhandled();\n        }\n    }\n\n    public detachHandle(handle: PluginHandle) {\n        let req: JanusSessionHandleRequest = {\n            session_id: this.sessionId,\n            janus: \"detach\",\n            handle_id: handle.handleId\n        }\n        return this.send(req)\n            .then(resp => {\n                this.logIncoming(`plugin handle detached ${handle.handleId}, resp ${prettifyJson(resp)}`);\n                this.handles.delete(handle.handleId);\n            })\n    }\n\n    private keepSessionAlive() {\n        // send keep alive every 50 seconds, ttl is 60 seconds\n        setInterval(() => {\n            this.send({janus: \"keepalive\", session_id: this.sessionId})\n              //  .then(resp => this.logIncoming(`rcvd keep alive response, resp ${prettifyJson(resp)}`));\n        }, 15 * 1000);\n    }\n\n    private logIncoming(log: string) {\n        console.debug(`JANUS => session ${this.sessionId} => ${log}`);\n    }\n\n    private logOutgoing(log: string) {\n        console.debug(`JANUS <= session ${this.sessionId} <= ${log}`);\n    }\n}\n\ntype HandleData = {\n    readonly id: string;\n}\ntype PluginHandleCreated = JanusResponse & {readonly data: HandleData; }","// provides api for ws/http based communication to janus server\n// abstracts away much of the stuff\nimport {JANUS_WS} from \"./Constants\"\nimport {prettifyJson, tid} from \"../utils\";\nimport {JanusResponse} from \"./types/JanusResponse\";\nimport {JanusRequest, JanusSessionRequest} from \"./types/JanusRequest\";\nimport {Session} from \"./Session\";\nimport {isSessionMessage} from \"./types/Messages\";\nimport {signalLog} from \"../elements\";\n\nclass Janus {\n    private wsPromise?: Promise<WebSocket>;\n    private activeReqs: Map<string, PromiseKeeper<any>>;\n    private sessions: Map<string, Session>;\n\n    private static readonly DEFAULT_TIMEOUT_MILLIS: number =  10000;\n\n    constructor() {\n        this.activeReqs = new Map<string, PromiseKeeper<JanusResponse>>();\n        this.sessions = new Map<string, Session>();\n    }\n\n    public createSession(): Promise<Session> {\n        return janus.send<SessionCreated>({janus: \"create\"})\n            .then(resp => {\n                let session: Session = new Session(resp.data.id);\n                console.log(`created new session ${session.sessionId}`);\n                this.sessions.set(session.sessionId, session);\n                return session;\n            });\n    }\n\n    public send<T extends JanusResponse>(req: JanusRequest) : Promise<T> {\n        req.transaction = tid();\n        this.logOutgoing(prettifyJson(req));\n        let resultF = new Promise<T>((resolve, reject) => {\n            this.activeReqs.set(<string>req.transaction, new PromiseKeeper<T>(resolve, reject));\n            setTimeout(() => {\n                reject(`request ${req.transaction} timed out, body: ${prettifyJson(req)}`);\n                // cleanup from activeReqs?\n                // this.activeReqs.delete(tranId);\n            }, Janus.DEFAULT_TIMEOUT_MILLIS);\n        });\n\n        return this.ws().then(ws => ws.send(JSON.stringify(req))).then(__ => resultF);\n    }\n\n    private ws(): Promise<WebSocket> {\n        if (!this.wsPromise) {\n            this.wsPromise = this.createWS();\n            return this.wsPromise;\n        } else {\n            return this.wsPromise;\n        }\n    }\n\n    private createWS() : Promise<WebSocket> {\n        let connection : WebSocket = new WebSocket(JANUS_WS, 'janus-protocol');\n        let promise: Promise<WebSocket> = new Promise(((resolve, reject) => {\n            connection.onopen = () => {\n                this.logOutgoing(\"JANUS <=> CONNECTED\");\n                return resolve(connection);\n            };\n            connection.onclose = (__) => {\n                this.logOutgoing(\"JANUS <~> DISCONNECTED\");\n                this.wsPromise = undefined;\n            }\n            connection.onmessage = (ev) => {\n                this.logIncoming(prettifyJson(ev.data))\n                this.receive(ev.data);\n            };\n            connection.onerror = (ev) => {\n                console.error(\"JANUS <~> error\", ev);\n            }\n            setTimeout(() => {\n                reject(`socket connection timed-out`);\n                // cleanup from activeReqs?\n                // this.activeReqs.delete(tranId);\n            }, Janus.DEFAULT_TIMEOUT_MILLIS);\n        }));\n        promise.catch(reason => {\n            console.error(\"janus ws connection failed, reason: \", reason, \". resetting!\");\n            this.logOutgoing(\"JANUS <~> DISCONNECTED\");\n            this.wsPromise = undefined;\n        });\n        return promise;\n    }\n\n    private reconnectToJanus() {\n        this.wsPromise = this.createWS();\n        this.sessions.forEach((__, session_id) => {\n            let req: JanusSessionRequest = new class implements JanusSessionRequest {\n                janus: string = \"claim\";\n                session_id: string = session_id;\n            }\n            this.send(req)\n                .then(__ => {\n                    console.log(`session ${session_id} reclaimed after reconnection`);\n                })\n        });\n    }\n\n    private receive(data: any) {\n        data = JSON.parse(data);\n        const transactionId: string = data.transaction;\n        if (transactionId && data.janus !== 'event') {\n            console.debug(`rcvd response for transaction ${transactionId}`);\n            if (!this.activeReqs.has(transactionId)) {\n                //console.error(`no response handler found for ${transactionId}`);\n                this.handleMessage(data);\n            } else {\n                const pk = this.activeReqs.get(transactionId);\n                if (pk !== undefined) {\n                    if (data[\"janus\"] === \"error\") {\n                        pk.reject(data[\"error\"]);\n                    } else {\n                        pk.resolve(data);\n                    }\n                    // cleanup\n                    this.activeReqs.delete(transactionId);\n                }\n            }\n        } else {\n            this.handleMessage(data);\n        }\n    }\n\n    // handle events and plugin data, pass on to specific session if for a session\n    private handleMessage(data: any) {\n        if (isSessionMessage(data)) {\n            const sessionId = data.session_id;\n            const session = this.sessions.get(sessionId);\n            if (session !== undefined) {\n                session.receive(data);\n            } else {\n                console.error(`rcvd msg for non-existing session ${sessionId}, msg ${prettifyJson(data)}`)\n            }\n        } else {\n            console.error(`unhandled msg ${prettifyJson(data)}`);\n        }\n    }\n\n    public logOutgoing(log: string) {\n        log = `<=== sent: \\n ${log}`;\n        console.debug(log);\n        signalLog(log);\n    }\n\n    public logIncoming(log: string) {\n        log = `===> rcvd: \\n${log}`;\n        console.debug(log);\n        signalLog(log);\n    }\n}\n\nclass PromiseKeeper<T extends JanusResponse> {\n    readonly resolve: (value?: T) => void;\n    readonly reject: (reason?: any) => void;\n\n    constructor(resolve: (value?: T) => void, reject: (reason?: any) => void) {\n        this.resolve = resolve;\n        this.reject = reject;\n    }\n}\n\nexport type SessionCreated = JanusResponse & {\n    readonly data: SessionData;\n}\n\ntype SessionData = {\n    readonly id: string;\n}\n\nexport const janus: Janus = new Janus();","import {PluginHandle, PluginHandleEventListener} from \"../janus/PluginHandle\";\nimport {VideoRoom} from \"./VideoRoom\";\nimport {Session} from \"../janus/Session\";\nimport {userMedia} from \"../webrtc/UserMedia\";\nimport {localStreamVid, signalLog, username} from \"../elements\";\nimport {JanusEvent, JanusVideoRoomEvent} from \"../janus/types/Messages\";\nimport {prettifyJson, rUsername} from \"../utils\";\n\nexport class Publisher {\n    private readonly room: VideoRoom;\n    public handle?: PluginHandle;\n    private localStream?: MediaStream;\n    private pc?: RTCPeerConnection;\n    private id?: number;\n\n    constructor(room: VideoRoom) {\n        this.room = room;\n        // @ts-ignore\n        window.publisher = this;\n    }\n\n    async init() {\n        this.localStream = await navigator.mediaDevices.getUserMedia(userMedia.mediaConstraints());\n        // @ts-ignore\n        window.localStream = this.localStream;\n        this.displayLocalVideo();\n        await this.setupPluginHandle();\n        return Promise.resolve();\n    }\n\n    private displayLocalVideo() {\n        localStreamVid.srcObject = this.localStream as MediaStream;\n    }\n\n    private async setupPluginHandle() {\n        this.handle = await this.room.session.createHandle();\n        this.handle.setEventListener('event', Publisher.makeHandleListener((ev) => this.handleJanusEvent(ev)));\n        this.handle.setEventListener('webrtcup', Publisher.makeHandleListener((ev) => this.handleWebrtcupEvent(ev)));\n        this.handle.setEventListener('media', Publisher.makeHandleListener((ev) => this.handleMediaEvent(ev)));\n        await this.handle.send({\n            request: 'join',\n            'ptype': 'publisher',\n            'room': this.room.roomId,\n            'display': username.value || rUsername()\n        });\n    }\n\n    private async publishFeed() {\n        this.pc = new RTCPeerConnection({\n            iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n        });\n        if (this.localStream) {\n            const ls = this.localStream;\n            ls.getTracks().forEach(t => this.pc?.addTrack(t, ls));\n        }\n        const offer = await this.pc.createOffer({\n            offerToReceiveAudio: false,\n            offerToReceiveVideo: false,\n        });\n        await this.pc.setLocalDescription(offer);\n        const resp = await this.handle?.send({\n            request: \"publish\",\n            audio: userMedia.audioDeviceId !== undefined,\n            video: userMedia.videoDeviceId !== undefined,\n            data: false\n        }, offer);\n        console.log(`rcvd offer resp ${prettifyJson(resp)}`)\n    }\n\n    private async handleJanusEvent(event: JanusVideoRoomEvent) {\n        let data = event.plugindata?.data;\n        if (data?.videoroom === 'joined') {\n            console.log(`JOINED room ${this.room.roomId}, starting publish`);\n            this.id = data.id;\n            localStreamVid.setAttribute('pid', String(this.id));\n            await this.publishFeed();\n        } else if (data?.videoroom === 'event') {\n            if (event.jsep !== undefined && event.jsep.type === 'answer') {\n                console.log('rcvd answer from janus');\n                this.pc?.setRemoteDescription(event.jsep);\n            }\n            if (data.publishers) {\n                console.log('subscribing to ', data.publishers)\n                data.publishers.forEach(pub => this.room.subscribe(pub));\n            }\n            console.log(`rcvd event for publisher ${prettifyJson(event)}`);\n        }\n        return Promise.resolve();\n    }\n\n    private async handleWebrtcupEvent(event: JanusVideoRoomEvent) {\n        console.log(`rcvd webrtcup ${prettifyJson(event)}  on ${this.handle?.handleId}`);\n        // webrtcup, subscribe to publishers\n        await this.room.subscribeToAll();\n        setInterval(() => this.showStats(),  1000);\n    }\n\n    private async handleMediaEvent(event: JanusVideoRoomEvent) {\n        console.log(`rcvd media event ${prettifyJson(event)}  on ${this.handle?.handleId}`);\n    }\n\n    private static makeHandleListener(cb: (ev: JanusVideoRoomEvent) => Promise<any>) : PluginHandleEventListener {\n        return new class implements PluginHandleEventListener {\n            onEvent(ev: JanusEvent): Promise<any> {\n                return cb(ev as JanusVideoRoomEvent);\n            }\n        }\n    }\n\n    private async showStats() {\n        // if (this.pc) {\n        //     let stats = await this.pc.getStats();\n        //     stats.forEach(res => {\n        //         // copied from janus.js\n        //         var inStats = false;\n        //         // Check if these are statistics on incoming media\n        //         if((res.mediaType === \"video\" || res.id.toLowerCase().indexOf(\"video\") > -1) &&\n        //             res.type === \"inbound-rtp\" && res.id.indexOf(\"rtcp\") < 0) {\n        //             // New stats\n        //             inStats = true;\n        //         } else if(res.type == 'ssrc' && res.bytesReceived &&\n        //             (res.googCodecName === \"VP8\" || res.googCodecName === \"\")) {\n        //             // Older Chromer versions\n        //             inStats = true;\n        //         }\n        //         signalLog(`stats: ${prettifyJson(stat)}`)\n        //     })\n        // }\n    }\n}","import {PluginHandle, PluginHandleEventListener} from \"../janus/PluginHandle\";\nimport {VideoRoom} from \"./VideoRoom\";\nimport {remoteVideoDisplayer, removeRemoteVid} from \"../elements\";\nimport {JanusEvent, JanusVideoRoomEvent} from \"../janus/types/Messages\";\nimport {prettifyJson} from \"../utils\";\nimport {ParticipantInfo} from \"../janus/types/ParticipantInfo\";\n\nexport class Subscriber {\n    public handle?: PluginHandle;\n    public readonly info: ParticipantInfo;\n\n    private readonly room: VideoRoom;\n    private remoteStream: MediaStream;\n    private pc: RTCPeerConnection;\n\n    constructor(room: VideoRoom, info: ParticipantInfo) {\n        this.room = room;\n        this.info = info;\n        this.pc = new RTCPeerConnection({\n            iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n        });\n        this.remoteStream = new MediaStream();\n        this.setupPCEventListeners();\n    }\n\n    async init() {\n        return this.setupPluginHandle();\n    }\n\n    private async setupPluginHandle() {\n        this.handle = await this.room.session.createHandle();\n        this.handle.setEventListener('event', Subscriber.makeHandleListener((ev) => this.handleJanusEvent(ev)));\n        this.handle.setEventListener('webrtcup', Subscriber.makeHandleListener((ev) => this.handleWebrtcupEvent(ev)));\n        this.handle.setEventListener('media', Subscriber.makeHandleListener((ev) => this.handleMediaEvent(ev)));\n        this.handle.setEventListener('attached', Subscriber.makeHandleListener((ev) => this.handleAttachedEvent(ev)));\n        this.handle.setEventListener('hangup', Subscriber.makeHandleListener((ev) => this.handleHangupEvent(ev)));\n        await this.handle.send({\n            request: 'join',\n            'ptype': 'subscriber',\n            'room': this.room.roomId,\n            'feed': this.info.id,\n            'audio': true,\n            'video': true,\n            'data': false\n        });\n    }\n\n    private async handleJanusEvent(event: JanusVideoRoomEvent) {\n        let data = event.plugindata?.data;\n        if (data?.videoroom === 'attached') {\n            if (event.jsep) {\n                // attached, set remote description on pc\n                console.log(`rcvd attached for publisher ${prettifyJson(event)}`);\n                await this.pc.setRemoteDescription(event.jsep);\n                const answer = await this.pc.createAnswer({offerToReceiveAudio: true, offerToReceiveVideo: true});\n                await this.handle?.send({\n                    request: \"start\"\n                }, answer);\n                await this.pc.setLocalDescription(answer);\n            }\n        } else {\n            console.log('rcvd unhandled subscriber event', event)\n        }\n        return Promise.resolve();\n    }\n\n    private async handleWebrtcupEvent(event: JanusVideoRoomEvent) {\n        console.log(`rcvd webrtcup ${prettifyJson(event)}  on ${this.handle?.handleId}`);\n    }\n\n    private async handleMediaEvent(event: JanusVideoRoomEvent) {\n        console.log(`rcvd media event ${prettifyJson(event)}  on ${this.handle?.handleId}`);\n    }\n\n    private async handleAttachedEvent(ev: JanusVideoRoomEvent) {\n        console.log(`rcvd attached event ${prettifyJson(ev)}  on ${this.handle?.handleId}`);\n    }\n\n    private static makeHandleListener(cb: (ev: JanusVideoRoomEvent) => Promise<any>) : PluginHandleEventListener {\n        return new class implements PluginHandleEventListener {\n            onEvent(ev: JanusEvent): Promise<any> {\n                return cb(ev as JanusVideoRoomEvent);\n            }\n        }\n    }\n\n    private setupPCEventListeners() {\n        this.pc.ontrack = (track) => {\n            console.error('REMOTE PC rcvd track from subscriber, track ', track);\n            this.remoteStream.addTrack(track.track);\n            remoteVideoDisplayer(String(this.info.id)).videoEl.srcObject = this.remoteStream;\n            remoteVideoDisplayer(String(this.info.id)).info.textContent = `name: ${this.info.display}\\nid: ${this.info.id}`;\n            // for (let i: number = 0;i < 10; ++i) {\n            //     remoteVideoDisplayer(String(this.info.id + String(i))).videoEl.srcObject = this.remoteStream;\n            //     remoteVideoDisplayer(String(this.info.id + String(i))).info.textContent = `name: ${this.info.display}\\nid: ${this.info.id}`;\n            // }\n        }\n        this.pc.onconnectionstatechange = (st) => {\n            console.error('REMOTE PC conn state change event', st, ' state is: ', this.pc.connectionState);\n        }\n        this.pc.onicecandidate = (ca) => {\n            console.error('REMOTE PC new ice candidate', ca);\n        }\n        this.pc.oniceconnectionstatechange = (st) => {\n            console.error('REMOTE PC ICE conn state change event', st, ' state is: ', this.pc.connectionState);\n        }\n        this.pc.onicecandidateerror = (st) => {\n            console.error('REMOTE PC ICE conn ERROR event ', st);\n        }\n        this.pc.onicegatheringstatechange = (st) => {\n            console.error('REMOTE PC ICE GATHERING event ', st);\n        }\n        this.pc.onnegotiationneeded = (st) => {\n            console.error('REMOTE PC NEGOTIATION needed ', st);\n        }\n        this.pc.onstatsended = (st) => {\n            console.error('REMOTE PC STATS event ', st);\n        }\n    }\n\n    private handleHangupEvent(ev: JanusVideoRoomEvent) {\n        console.log(`HANG UP FOR ${this.info.id} ev: ${prettifyJson(ev)}`);\n        removeRemoteVid(String(this.info.id));\n        this.room.unsubscribe(this);\n        return Promise.resolve(undefined);\n    }\n}","import {ParticipantInfo} from \"../janus/types/ParticipantInfo\";\nimport {Session} from \"../janus/Session\";\nimport {Publisher} from \"./Publisher\";\nimport {Subscriber} from \"./Subscriber\";\n\nexport class VideoRoom {\n    public readonly session: Session;\n    public readonly roomId: number;\n    private readonly publisher: Publisher;\n    private subscribers: Map<number, Subscriber>;\n\n    constructor(session: Session, roomId: number) {\n        this.session = session;\n        this.roomId = roomId;\n        this.publisher = new Publisher(this);\n        this.subscribers = new Map<number, Subscriber>();\n    }\n\n    public async subscribe(participant: ParticipantInfo) {\n        console.log(`subscribing to ${participant.display}:${participant.id}`);\n        let subscriber = new Subscriber(this, participant);\n        await subscriber.init();\n        this.subscribers.set(participant.id, subscriber);\n    }\n\n    public unsubscribe(subscriber: Subscriber) {\n        this.subscribers.delete(subscriber.info.id);\n    }\n\n    public async listParticipants(): Promise<ParticipantInfo[]> {\n        return this.publisher.handle?.send<any>({\n            request: \"listparticipants\",\n            room: this.roomId\n        }).then(resp => resp.plugindata.data.participants);\n    }\n\n    async init(): Promise<void> {\n        return this.publisher.init();\n    }\n\n    async subscribeToAll() {\n        const participants = await this.listParticipants();\n        participants.forEach(participant => this.subscribe(participant));\n    }\n}","import {userMedia} from \"./webrtc/UserMedia\";\nimport {rUsername} from \"./utils\";\nimport {\n    audioSelect,\n    constraintsDiv,\n    localStreamVid,\n    roomDiv,\n    remoteStreamDiv,\n    joinBtn,\n    progressBar,\n    videoSelect,\n    username, statsDiv, unhideEl, hideEl\n} from \"./elements\";\nimport {janus} from \"./janus/Janus\";\nimport {VideoRoom} from \"./video-room/VideoRoom\";\nimport {TEST_ROOM_ID} from \"./janus/Constants\";\n\nwindow.addEventListener('load', () => {\n    username.value = rUsername();\n    hideEl(progressBar)\n    showDeviceOptions();\n});\n\njoinBtn.onclick = () => {\n    if (userMedia.videoDeviceId === null && userMedia.audioDeviceId === null) {\n        alert('select atleast one of audio or video devices to proceed');\n    } else {\n        unhideEl(progressBar);\n        setupRoom().then(() => {\n            console.log(\"All set, rendering video room\");\n            hideEl(constraintsDiv);\n            hideEl(progressBar);\n            unhideEl(roomDiv);\n            unhideEl(statsDiv);\n        }).catch(e => {\n            console.log(`error in setting up room ${e}`);\n            alert('error in setting up room. check console and reload to try again');\n        });\n    }\n}\n\nasync function showDeviceOptions() {\n    let audioDevices = await userMedia.audioInDevices();\n    let videoDevices = await userMedia.videoDevices();\n    audioDevices.forEach(device => {\n        const option = document.createElement(\"option\");\n        option.text = device.label || `Audio device ${device.deviceId}`;\n        option.value = device.deviceId;\n        audioSelect.appendChild(option);\n    });\n    videoDevices.forEach(device => {\n        const option = document.createElement(\"option\");\n        option.text = device.label || `Video device ${device.deviceId}`;\n        option.value = device.deviceId;\n        videoSelect.appendChild(option);\n    })\n    userMedia.audioDeviceId = audioSelect.value;\n    userMedia.videoDeviceId = videoSelect.value;\n    audioSelect.onchange = () => userMedia.audioDeviceId = audioSelect.value;\n    videoSelect.onchange = () => userMedia.videoDeviceId = videoSelect.value;\n}\n\nasync function setupRoom() {\n    return janus.createSession().then(session => {\n        let vr: VideoRoom = new VideoRoom(session, TEST_ROOM_ID);\n        return vr.init();\n    });\n}"]}